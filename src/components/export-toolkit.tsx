"use client";

import React, { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { Folder, File, Copy } from "lucide-react";
import { toast } from "sonner";
import { ResizableHandle, ResizablePanel, ResizablePanelGroup } from "@/components/ui/resizable";
import { Prism as SyntaxHighlighter } from "react-syntax-highlighter";
import { atomDark } from "react-syntax-highlighter/dist/esm/styles/prism";
import { cn } from "@/lib/utils";

const fileContents: Record<string, string> = {
  "package.json": `{
  "name": "my-next-app",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "next": "14.2.3",
    "react": "^18",
    "react-dom": "^18",
    "tailwindcss": "^3.4.1",
    "@radix-ui/react-slot": "^1.0.2",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.1.1",
    "lucide-react": "^0.378.0",
    "tailwind-merge": "^2.3.0",
    "tailwindcss-animate": "^1.0.7"
  }
}`,
  "tailwind.config.ts": `import type { Config } from "tailwindcss";

const config: Config = {
  darkMode: ["class"],
  content: [
    './src/pages/**/*.{js,ts,jsx,tsx,mdx}',
    './src/components/**/*.{js,ts,jsx,tsx,mdx}',
    './src/app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    extend: {
      // ... theme configuration
    },
  },
  plugins: [require("tailwindcss-animate")],
};
export default config;`,
  "src/app/layout.tsx": `import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "./globals.css";

const inter = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en">
      <body className={inter.className}>{children}</body>
    </html>
  );
}`,
  "src/app/page.tsx": `import { Button } from "@/components/ui/button";

export default function Home() {
  return (
    <main className="flex min-h-screen flex-col items-center justify-center p-24">
      <h1 className="text-4xl font-bold mb-4">Hello, World!</h1>
      <Button>Get Started</Button>
    </main>
  );
}`,
};

const fileTree = [
  { name: "src", type: "folder", children: [
    { name: "app", type: "folder", children: [
      { name: "layout.tsx", type: "file", path: "src/app/layout.tsx" },
      { name: "page.tsx", type: "file", path: "src/app/page.tsx" },
    ]},
  ]},
  { name: "package.json", type: "file", path: "package.json" },
  { name: "tailwind.config.ts", type: "file", path: "tailwind.config.ts" },
];

const FileTreeItem = ({ item, level = 0, onSelect, selectedFile }: { item: any; level?: number; onSelect: (path: string) => void; selectedFile: string | null }) => (
  <button
    onClick={() => item.type === 'file' && onSelect(item.path)}
    disabled={item.type === 'folder'}
    className={cn(
      "w-full text-left flex items-center text-sm px-2 py-1.5 rounded-md",
      item.type === 'folder' ? 'cursor-default text-muted-foreground' : 'hover:bg-muted',
      selectedFile === item.path && 'bg-muted'
    )}
    style={{ paddingLeft: `${level * 1.5 + 0.5}rem` }}
  >
    {item.type === 'folder' ? <Folder className="h-4 w-4 mr-2 text-primary" /> : <File className="h-4 w-4 mr-2 text-muted-foreground" />}
    <span>{item.name}</span>
  </button>
);

const RenderFileTree = ({ tree, level = 0, onSelect, selectedFile }: { tree: any[]; level?: number; onSelect: (path: string) => void; selectedFile: string | null }) => (
  <>
    {tree.map(item => (
      <div key={item.name}>
        <FileTreeItem item={item} level={level} onSelect={onSelect} selectedFile={selectedFile} />
        {item.children && <RenderFileTree tree={item.children} level={level + 1} onSelect={onSelect} selectedFile={selectedFile} />}
      </div>
    ))}
  </>
);

export const ExportToolkit = () => {
  const [selectedFile, setSelectedFile] = useState<string | null>("src/app/page.tsx");

  const handleCopy = () => {
    if (selectedFile && fileContents[selectedFile]) {
      navigator.clipboard.writeText(fileContents[selectedFile]);
      toast.success("Code copied to clipboard!");
    }
  };

  return (
    <Card className="overflow-hidden">
      <CardContent className="p-0">
        <ResizablePanelGroup direction="horizontal" className="min-h-[600px] w-full">
          <ResizablePanel defaultSize={30} minSize={20}>
            <div className="p-4 h-full">
              <h3 className="font-semibold mb-2">File Explorer</h3>
              <div className="font-mono space-y-1">
                <RenderFileTree tree={fileTree} onSelect={setSelectedFile} selectedFile={selectedFile} />
              </div>
            </div>
          </ResizablePanel>
          <ResizableHandle withHandle />
          <ResizablePanel defaultSize={70}>
            <div className="relative h-full">
              {selectedFile && (
                <Button
                  size="sm"
                  onClick={handleCopy}
                  className="absolute top-4 right-4 z-10"
                >
                  <Copy className="mr-2 h-4 w-4" />
                  Copy
                </Button>
              )}
              <div className="h-full bg-[#282c34] overflow-y-auto">
                {selectedFile ? (
                  <SyntaxHighlighter
                    language="tsx"
                    style={atomDark}
                    customStyle={{ margin: 0, padding: "1.5rem", backgroundColor: "transparent", height: '100%' }}
                    showLineNumbers
                  >
                    {fileContents[selectedFile]}
                  </SyntaxHighlighter>
                ) : (
                  <div className="flex items-center justify-center h-full text-muted-foreground">
                    <p>Select a file to view its content.</p>
                  </div>
                )}
              </div>
            </div>
          </ResizablePanel>
        </ResizablePanelGroup>
      </CardContent>
    </Card>
  );
};